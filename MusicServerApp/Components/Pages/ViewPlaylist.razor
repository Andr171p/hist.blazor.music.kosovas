@page "/playlists/{id:int}"
@inject IPlaylistService PlaylistService
@inject ITrackService TrackService
@inject NavigationManager NavigationManager

<h1>Треки в плейлисте</h1>

@if (Playlist == null)
{
    <p><em>Загрузка...</em></p>
}
else if (Playlist.Tracks.Count == 0)
{
    <p>В этом плейлисте нет треков.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Артист</th>
                <th>Длительность</th>
                <th>Жанр</th>
                <th>Дата релиза</th>
                <th> </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.Title</td>
                    <td>@track.Artist.Name</td>
                    <td>@track.Duration</td>
                    <td>@track.Genre</td>
                    <td>@track.ReleaseDate.ToString("d")</td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="@(() => RemoveTrackFromPlaylist(track))">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Playlist? Playlist { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null && int.TryParse(Id.ToString(), out int parsedId))
        {
            Playlist = await PlaylistService.GetByIdAsync(parsedId);
        }
    }   

    private async Task RemoveTrackFromPlaylist(Track track)
    {
        if (Playlist != null)
        {
            await TrackService.RemoveTrackFromPlaylistAsync(Playlist.Id, track.Id);
            Playlist.Tracks.Remove(track);
            StateHasChanged();
        }
    }
}

